graphdata = {}
n = int(input(&quot;ENTER THE NUMBER OF EDGES YOU WANT THE GRAPH TO BE=&quot;))
print(&quot;ENTER THE EDGES AS (U,V) AND TYPE ONE EDGE ON ONE LINE=&quot;)
for _ in range(n):
u, v = input().split()
u, v = int(u), int(v)
if u not in graphdata:
graphdata[u] = []
if v not in graphdata:
graphdata[v] = []
graphdata[u].append(v)
graphdata[v].append(u)
startvertex = int(input(&quot;ENTER THE STARTING VEXTEX FROM WHERE YOU WANT TO START
FOR DFS AND BFS=&quot;))
class Graph:
def __init__(self, graph):
self.graph = graph
def dfsrecursive(self, vertex, visited=None):
if visited is None:
visited = set()
visited.add(vertex)
print(vertex, end=&#39; &#39;)
for neighbor in self.graph.get(vertex, []):
if neighbor not in visited:
self.dfsrecursive(neighbor, visited)
return visited
def dfsstack(self, start):
visited = set()
stack = [start]
while stack:
vertex = stack.pop()
if vertex not in visited:
print(vertex, end=&#39; &#39;)
visited.add(vertex)
for neighbor in reversed(self.graph.get(vertex, [])):
if neighbor not in visited:
stack.append(neighbor)
return visited
def bfs(self, start):
visited = set()
queue = [start]
visited.add(start)
while queue:
vertex = queue.pop(0)

print(vertex, end=&#39; &#39;)
for neighbor in self.graph.get(vertex, []):
if neighbor not in visited:
visited.add(neighbor)
queue.append(neighbor)
return visited
g = Graph(graphdata)
print(&quot;DFS RECURSIVE TRAVERSAL STARTING FROM THE GIVEN VERTEX IS=&quot;, startvertex)
g.dfsrecursive(startvertex)
print()
print(&quot;DFS TRAVERSAL USING STACK FROM THE GIVEN VERTEX IS=&quot;, startvertex)
g.dfsstack(startvertex)
print()
print(&quot;BFS TRAVERSAL STARTING FROM THE GIVEN VERTEX IS=&quot;, startvertex)
g.bfs(startvertex)
print()
